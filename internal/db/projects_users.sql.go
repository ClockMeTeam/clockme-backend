// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects_users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addUserToProject = `-- name: AddUserToProject :one
INSERT INTO projects_users (user_id, project_id)
VALUES (
        $1,
        $2
       )
RETURNING user_id, project_id
`

type AddUserToProjectParams struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) AddUserToProject(ctx context.Context, arg AddUserToProjectParams) (ProjectsUser, error) {
	row := q.db.QueryRowContext(ctx, addUserToProject, arg.UserID, arg.ProjectID)
	var i ProjectsUser
	err := row.Scan(&i.UserID, &i.ProjectID)
	return i, err
}

const listProjectsForUser = `-- name: ListProjectsForUser :many
SELECT projects.id, projects.name, projects.created_at, projects.updated_at FROM projects
JOIN projects_users ON projects.id = projects_users.project_id
WHERE projects_users.user_id = $1
`

func (q *Queries) ListProjectsForUser(ctx context.Context, userID uuid.UUID) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjectsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersForProject = `-- name: ListUsersForProject :many
SELECT users.id, users.hashed_password, users.name, users.email, users.created_at, users.updated_at FROM users
JOIN projects_users ON users.id = projects_users.user_id
WHERE projects_users.project_id = $1
`

func (q *Queries) ListUsersForProject(ctx context.Context, projectID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.HashedPassword,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromProject = `-- name: RemoveUserFromProject :exec
DELETE FROM projects_users
WHERE user_id = $1 AND project_id = $2
`

type RemoveUserFromProjectParams struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) RemoveUserFromProject(ctx context.Context, arg RemoveUserFromProjectParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromProject, arg.UserID, arg.ProjectID)
	return err
}
