// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects(name) VALUES ($1)
RETURNING id, name, type_id, created_at, updated_at
`

func (q *Queries) CreateProject(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProjectByName = `-- name: DeleteProjectByName :exec
DELETE FROM projects WHERE name = $1
`

func (q *Queries) DeleteProjectByName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteProjectByName, name)
	return err
}

const getProjectByName = `-- name: GetProjectByName :one
SELECT id, name, type_id, created_at, updated_at FROM projects WHERE name = $1
`

func (q *Queries) GetProjectByName(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByName, name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectType = `-- name: GetProjectType :one
SELECT pt.name FROM projects p
LEFT JOIN project_types pt  ON p.type_id = pt.id
WHERE p.id = $1
`

func (q *Queries) GetProjectType(ctx context.Context, id uuid.UUID) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getProjectType, id)
	var name pgtype.Text
	err := row.Scan(&name)
	return name, err
}

const getProjectUsers = `-- name: GetProjectUsers :many
SELECT u.id, u.clockify_id, u.name, u.email, u.created_at, u.updated_at FROM users u
JOIN user_projects up ON u.id = up.user_id
WHERE up.project_id = $1
`

func (q *Queries) GetProjectUsers(ctx context.Context, projectID uuid.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, getProjectUsers, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ClockifyID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjects = `-- name: GetProjects :many
SELECT id, name, type_id, created_at, updated_at FROM projects
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET
    name = $1,
    type_id = COALESCE($2, type_id),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $3
RETURNING id, name, type_id, created_at, updated_at
`

type UpdateProjectParams struct {
	Name   string      `json:"name"`
	TypeID pgtype.UUID `json:"type_id"`
	ID     uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject, arg.Name, arg.TypeID, arg.ID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProjectType = `-- name: UpdateProjectType :one
UPDATE projects
SET
    type_id = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $2
RETURNING id, name, type_id, created_at, updated_at
`

type UpdateProjectTypeParams struct {
	TypeID pgtype.UUID `json:"type_id"`
	ID     uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateProjectType(ctx context.Context, arg UpdateProjectTypeParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjectType, arg.TypeID, arg.ID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
