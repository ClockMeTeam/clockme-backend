// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project_types.sql

package db

import (
	"context"
)

const createProjectType = `-- name: CreateProjectType :one
INSERT INTO project_types(name) VALUES ($1)
RETURNING id, name, base_hour, created_at, updated_at
`

func (q *Queries) CreateProjectType(ctx context.Context, name string) (ProjectType, error) {
	row := q.db.QueryRow(ctx, createProjectType, name)
	var i ProjectType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BaseHour,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProjectTypeByName = `-- name: DeleteProjectTypeByName :exec
DELETE FROM project_types WHERE name = $1
RETURNING id, name, base_hour, created_at, updated_at
`

func (q *Queries) DeleteProjectTypeByName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteProjectTypeByName, name)
	return err
}

const getProjectProjectType = `-- name: GetProjectProjectType :one
SELECT id, name, base_hour, created_at, updated_at FROM project_types WHERE name = $1
`

func (q *Queries) GetProjectProjectType(ctx context.Context, name string) (ProjectType, error) {
	row := q.db.QueryRow(ctx, getProjectProjectType, name)
	var i ProjectType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BaseHour,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectTypes = `-- name: GetProjectTypes :many
SELECT id, name, base_hour, created_at, updated_at FROM project_types
`

func (q *Queries) GetProjectTypes(ctx context.Context) ([]ProjectType, error) {
	rows, err := q.db.Query(ctx, getProjectTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProjectType{}
	for rows.Next() {
		var i ProjectType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BaseHour,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProjectProjectType = `-- name: UpdateProjectProjectType :one
UPDATE project_types
SET
    name = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE name = $2
RETURNING id, name, base_hour, created_at, updated_at
`

type UpdateProjectProjectTypeParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) UpdateProjectProjectType(ctx context.Context, arg UpdateProjectProjectTypeParams) (ProjectType, error) {
	row := q.db.QueryRow(ctx, updateProjectProjectType, arg.Name, arg.Name_2)
	var i ProjectType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BaseHour,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
